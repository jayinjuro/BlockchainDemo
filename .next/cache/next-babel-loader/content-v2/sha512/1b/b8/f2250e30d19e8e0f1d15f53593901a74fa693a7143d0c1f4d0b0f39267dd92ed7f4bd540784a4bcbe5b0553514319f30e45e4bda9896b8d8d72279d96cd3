{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/turtl/TokenApp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/turtl/TokenApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\turtl\\\\TokenApp\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Jumbotron from \"../components/layout/Jumbotron\";\nimport FooterPage from \"../components/layout/Footer\";\nimport Item from \"../components/Item\";\nimport Web3 from 'web3';\nimport JuroToken from '../build/contracts/JuroToken.json';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nfunction HomePage(props) {\n  _s();\n\n  var _useState = useState(null),\n      web3 = _useState[0],\n      setWeb3 = _useState[1];\n\n  var _useState2 = useState(null),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState(0),\n      amount = _useState3[0],\n      setAmount = _useState3[1];\n\n  var _useState4 = useState(null),\n      JuroTokenContract = _useState4[0],\n      setJuroTokenContract = _useState4[1];\n\n  var loadBlockChainData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _web, accounts, networkId, juroToken;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof window.ethereum !== 'undefined')) {\n                _context.next = 15;\n                break;\n              }\n\n              // window.ethereum.request({method:'eth_requestAccounts'})\n              _web = new Web3(window.ethereum);\n              setWeb3(_web);\n              _context.next = 5;\n              return _web.eth.getAccounts();\n\n            case 5:\n              accounts = _context.sent;\n\n              if (accounts.length > 0) {\n                setAccount(accounts[0]);\n              }\n\n              _context.next = 9;\n              return _web.eth.net.getId();\n\n            case 9:\n              networkId = _context.sent;\n              console.log(networkId);\n              juroToken = new _web.eth.Contract(JuroToken.abi, JuroToken.networks[networkId].address);\n              setJuroTokenContract(juroToken);\n              window.ethereum.on('accountsChanged', function (accounts) {\n                setAccount(accounts[0]);\n              });\n              window.ethereum.on('chainChanged', function (chainId) {\n                window.location.reload();\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadBlockChainData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadBlockChainData();\n  }, []);\n  useEffect(function () {\n    loadBlockChainData();\n  }, [account]);\n\n  var connectHandler = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return window.ethereum.request({\n                method: 'eth_requestAccounts'\n              });\n\n            case 2:\n              accounts = _context2.sent;\n              console.log(accounts);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function connectHandler() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var buyHandler = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var tokenAmount;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return JuroTokenContract.methods.transfer(account, '1').send({\n                from: '0x5b1030dcd0af8b77b83e1b52e01864a79bed32ed'\n              });\n\n            case 3:\n              _context3.next = 5;\n              return JuroTokenContract.methods.balanceOf(account).call();\n\n            case 5:\n              tokenAmount = _context3.sent;\n              setAmount(tokenAmount);\n              _context3.next = 12;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              window.alert('Error occurred when buying');\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 9]]);\n    }));\n\n    return function buyHandler() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      click: connectHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Item, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FooterPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomePage, \"06IedLUBCp2QuUwd6DnL0KvdSvY=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/turtl/TokenApp/pages/index.js"],"names":["useState","useEffect","Jumbotron","FooterPage","Item","Web3","JuroToken","detectEthereumProvider","HomePage","props","web3","setWeb3","account","setAccount","amount","setAmount","JuroTokenContract","setJuroTokenContract","loadBlockChainData","window","ethereum","eth","getAccounts","accounts","length","net","getId","networkId","console","log","juroToken","Contract","abi","networks","address","on","chainId","location","reload","connectHandler","request","method","buyHandler","methods","transfer","send","from","balanceOf","call","tokenAmount","alert"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Jumbotron from \"../components/layout/Jumbotron\";\nimport FooterPage from \"../components/layout/Footer\";\nimport Item from \"../components/Item\";\nimport Web3 from 'web3';\nimport JuroToken from '../build/contracts/JuroToken.json';\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nfunction HomePage(props) {\n  const [web3, setWeb3] = useState(null)\n\tconst [account, setAccount] = useState(null)\n\tconst [amount, setAmount] = useState(0)\n  const [JuroTokenContract, setJuroTokenContract] = useState(null)\n\n\n  const loadBlockChainData=async()=>{\n    if (typeof window.ethereum!=='undefined') {\n      // window.ethereum.request({method:'eth_requestAccounts'})\n\t\t\tconst web3 = new Web3(window.ethereum)\n\t\t\tsetWeb3(web3)\n\n\t\t\tconst accounts = await web3.eth.getAccounts()\n\n\t\t\tif (accounts.length > 0) {\n\t\t\t\tsetAccount(accounts[0])\n\t\t\t}\n\n\t\t\tconst networkId = await web3.eth.net.getId()\n      console.log(networkId)\n\n\t\t\tconst juroToken = new web3.eth.Contract(JuroToken.abi, JuroToken.networks[networkId].address)\n\t\t\tsetJuroTokenContract(juroToken)\n\n      window.ethereum.on('accountsChanged', function (accounts) {\n\t\t\t\tsetAccount(accounts[0])\n\t\t\t})\n      window.ethereum.on('chainChanged', (chainId) => {\n\t\t\t\twindow.location.reload();\n\t\t\t})\n    }\n  }\n\n  useEffect(()=>{\n    loadBlockChainData()\n  },[])\n\n  useEffect(()=>{\n    loadBlockChainData()\n  },[account])\n  \n  const connectHandler=async()=>{\n    const accounts=await window.ethereum.request({method:'eth_requestAccounts'})\n    console.log(accounts)}\n\n\n  const buyHandler = async () => {\n    try {\n      await JuroTokenContract.methods.transfer(account,'1').send({ from:'0x5b1030dcd0af8b77b83e1b52e01864a79bed32ed'})\n  \n      const tokenAmount = await JuroTokenContract.methods.balanceOf(account).call()\n      setAmount(tokenAmount)\n\n    } catch (error) {\n      window.alert('Error occurred when buying')\n    }\n  }\n  \n\n  return (\n    <div>\n      <Jumbotron click={connectHandler}></Jumbotron>\n      <Item />\n      <FooterPage></FooterPage>\n    </div>\n  );\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}