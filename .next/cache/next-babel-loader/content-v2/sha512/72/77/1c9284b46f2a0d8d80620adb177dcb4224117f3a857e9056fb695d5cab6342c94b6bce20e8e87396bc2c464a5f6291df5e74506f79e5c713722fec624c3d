{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\turtl\\\\TokenApp\\\\pages\\\\index.js\";\nimport { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Jumbotron from \"../components/layout/Jumbotron\";\nimport FooterPage from \"../components/layout/Footer\";\nimport Item from \"../components/Item\";\nimport Web3 from 'web3';\nimport JuroToken from '../build/contracts/JuroToken.json';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nfunction HomePage(props) {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState(null);\n  const {\n    0: account,\n    1: setAccount\n  } = useState(null);\n  const {\n    0: JuroTokenContract,\n    1: setJuroTokenContract\n  } = useState(null);\n\n  const loadBlockChainData = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      // window.ethereum.request({method:'eth_requestAccounts'})\n      const web3 = new Web3(window.ethereum);\n      setWeb3(web3);\n      const accounts = await web3.eth.getAccounts();\n\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n      }\n\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const juroToken = new web3.eth.Contract(JuroToken.abi, JuroToken.networks[networkId].address);\n      setJuroTokenContract(juroToken);\n      window.ethereum.on('accountsChanged', function (accounts) {\n        setAccount(accounts[0]);\n      });\n      window.ethereum.on('chainChanged', chainId => {\n        window.location.reload();\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadBlockChainData();\n  }, []);\n  useEffect(() => {\n    loadBlockChainData();\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        console.log(accounts);\n      },\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Item, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FooterPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/turtl/TokenApp/pages/index.js"],"names":["useState","useEffect","Jumbotron","FooterPage","Item","Web3","JuroToken","detectEthereumProvider","HomePage","props","web3","setWeb3","account","setAccount","JuroTokenContract","setJuroTokenContract","loadBlockChainData","window","ethereum","accounts","eth","getAccounts","length","networkId","net","getId","console","log","juroToken","Contract","abi","networks","address","on","chainId","location","reload","request","method"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,sCAAP;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACD,QAAM;AAAA,OAACY,OAAD;AAAA,OAAUC;AAAV,MAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACC,QAAM;AAAA,OAACc,iBAAD;AAAA,OAAoBC;AAApB,MAA4Cf,QAAQ,CAAC,IAAD,CAA1D;;AAGA,QAAMgB,kBAAkB,GAAC,YAAS;AAChC,QAAI,OAAOC,MAAM,CAACC,QAAd,KAAyB,WAA7B,EAA0C;AACxC;AACH,YAAMR,IAAI,GAAG,IAAIL,IAAJ,CAASY,MAAM,CAACC,QAAhB,CAAb;AACAP,MAAAA,OAAO,CAACD,IAAD,CAAP;AAEA,YAAMS,QAAQ,GAAG,MAAMT,IAAI,CAACU,GAAL,CAASC,WAAT,EAAvB;;AAEA,UAAIF,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AACxBT,QAAAA,UAAU,CAACM,QAAQ,CAAC,CAAD,CAAT,CAAV;AACA;;AAED,YAAMI,SAAS,GAAG,MAAMb,IAAI,CAACU,GAAL,CAASI,GAAT,CAAaC,KAAb,EAAxB;AACGC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AAEH,YAAMK,SAAS,GAAG,IAAIlB,IAAI,CAACU,GAAL,CAASS,QAAb,CAAsBvB,SAAS,CAACwB,GAAhC,EAAqCxB,SAAS,CAACyB,QAAV,CAAmBR,SAAnB,EAA8BS,OAAnE,CAAlB;AACAjB,MAAAA,oBAAoB,CAACa,SAAD,CAApB;AAEGX,MAAAA,MAAM,CAACC,QAAP,CAAgBe,EAAhB,CAAmB,iBAAnB,EAAsC,UAAUd,QAAV,EAAoB;AAC5DN,QAAAA,UAAU,CAACM,QAAQ,CAAC,CAAD,CAAT,CAAV;AACA,OAFE;AAGAF,MAAAA,MAAM,CAACC,QAAP,CAAgBe,EAAhB,CAAmB,cAAnB,EAAoCC,OAAD,IAAa;AAClDjB,QAAAA,MAAM,CAACkB,QAAP,CAAgBC,MAAhB;AACA,OAFE;AAGD;AACF,GAzBD;;AA2BAnC,EAAAA,SAAS,CAAC,MAAI;AACZe,IAAAA,kBAAkB;AACnB,GAFQ,EAEP,EAFO,CAAT;AAIAf,EAAAA,SAAS,CAAC,MAAI;AACZe,IAAAA,kBAAkB;AACnB,GAFQ,EAEP,CAACJ,OAAD,CAFO,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,YAAS;AAAC,cAAMO,QAAQ,GAAC,MAAMF,MAAM,CAACC,QAAP,CAAgBmB,OAAhB,CAAwB;AAACC,UAAAA,MAAM,EAAC;AAAR,SAAxB,CAArB;AAC7BZ,QAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AAAsB,OADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AAED,eAAeX,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Jumbotron from \"../components/layout/Jumbotron\";\nimport FooterPage from \"../components/layout/Footer\";\nimport Item from \"../components/Item\";\nimport Web3 from 'web3';\nimport JuroToken from '../build/contracts/JuroToken.json';\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nfunction HomePage(props) {\n  const [web3, setWeb3] = useState(null)\n\tconst [account, setAccount] = useState(null)\n  const [JuroTokenContract, setJuroTokenContract] = useState(null)\n\n\n  const loadBlockChainData=async()=>{\n    if (typeof window.ethereum!=='undefined') {\n      // window.ethereum.request({method:'eth_requestAccounts'})\n\t\t\tconst web3 = new Web3(window.ethereum)\n\t\t\tsetWeb3(web3)\n\n\t\t\tconst accounts = await web3.eth.getAccounts()\n\n\t\t\tif (accounts.length > 0) {\n\t\t\t\tsetAccount(accounts[0])\n\t\t\t}\n\n\t\t\tconst networkId = await web3.eth.net.getId()\n      console.log(networkId)\n\n\t\t\tconst juroToken = new web3.eth.Contract(JuroToken.abi, JuroToken.networks[networkId].address)\n\t\t\tsetJuroTokenContract(juroToken)\n\n      window.ethereum.on('accountsChanged', function (accounts) {\n\t\t\t\tsetAccount(accounts[0])\n\t\t\t})\n      window.ethereum.on('chainChanged', (chainId) => {\n\t\t\t\twindow.location.reload();\n\t\t\t})\n    }\n  }\n\n  useEffect(()=>{\n    loadBlockChainData()\n  },[])\n\n  useEffect(()=>{\n    loadBlockChainData()\n  },[account])\n\n  return (\n    <div>\n      <Jumbotron></Jumbotron>\n      <button onClick={async()=>{const accounts=await window.ethereum.request({method:'eth_requestAccounts'})\n    console.log(accounts)}}>Connect</button>\n      <Item />\n      <FooterPage></FooterPage>\n    </div>\n  );\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}