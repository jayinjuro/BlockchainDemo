{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\turtl\\\\TokenApp\\\\pages\\\\_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"../components/layout/Layout\";\nimport { useState, useEffect } from \"react\";\nimport Web3 from 'web3';\nimport JuroToken from '../build/contracts/JuroToken.json';\nimport { injected } from '../utils/connector';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Web3ReactProvider } from '@web3-react/core';\nimport \"../styles/globals.css\";\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState(null);\n  const {\n    0: account,\n    1: setAccount\n  } = useState(null);\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(0);\n  const {\n    0: JuroTokenContract,\n    1: setJuroTokenContract\n  } = useState(null);\n  const tokenOwner = '0x5b1030dcd0af8b77b83e1b52e01864a79bed32ed';\n  const {\n    0: totalToken,\n    1: setTotalToken\n  } = useState(0);\n  const {\n    active,\n    library,\n    connector,\n    activate,\n    deactivate\n  } = useWeb3React();\n\n  async function connect() {\n    try {\n      await activate(injected);\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  async function disconnect() {\n    try {\n      deactivate();\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  const loadBlockChainData = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      // window.ethereum.request({method:'eth_requestAccounts'})\n      const web3 = new Web3(window.ethereum);\n      setWeb3(web3);\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n      }\n\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const juroToken = new web3.eth.Contract(JuroToken.abi, JuroToken.networks[networkId].address);\n      setJuroTokenContract(juroToken);\n      console.log(JuroTokenContract);\n      window.ethereum.on('accountsChanged', function (accounts) {\n        setAccount(accounts[0]);\n        console.log(account);\n      });\n      window.ethereum.on('chainChanged', chainId => {\n        window.location.reload();\n      });\n    }\n  };\n\n  const loadTokenAmountData = async () => {\n    if (account && JuroTokenContract) {\n      const tokenAmount = await JuroTokenContract.methods.balanceOf(account).call();\n      setAmount(tokenAmount);\n      console.log(amount);\n    }\n  };\n\n  const totalSupplyData = async () => {\n    if (JuroTokenContract) {\n      const totalSupply = await JuroTokenContract.methods.totalSupply().call();\n      setTotalToken(totalSupply);\n      console.log(totalToken);\n    }\n  };\n\n  useEffect(() => {\n    loadBlockChainData(), loadTokenAmountData(), totalSupplyData();\n  }, []);\n  useEffect(() => {\n    loadBlockChainData(), loadTokenAmountData(), totalSupplyData();\n  }, [account]);\n  useEffect(() => {\n    loadTokenAmountData();\n  }, [account, amount]);\n  useEffect(() => {\n    totalSupplyData();\n  }, [totalToken]);\n\n  const connectHandler = async () => {\n    if (web3) {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(accounts);\n      setAccount(accounts[0]);\n    }\n  };\n\n  const disconnectHandler = async () => {\n    if (web3) {\n      const accounts = await window.ethereum.request({\n        method: \"wallet_requestPermissions\",\n        params: [{\n          eth_accounts: {}\n        }]\n      }).then(() => ethereum.request({\n        method: 'eth_requestAccounts'\n      }));\n      setAccount(accounts[0]);\n    }\n  };\n\n  const buyHandler = async () => {\n    try {\n      console.log(account);\n      const getToken = await JuroTokenContract.methods.getToken().send({\n        from: account,\n        value: '1000000000000000'\n      });\n      const tokenAmount = await JuroTokenContract.methods.balanceOf(account).call();\n      setAmount(tokenAmount);\n      console.log(getToken);\n    } catch (error) {\n      window.alert('Error occurred when buying');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    account: account,\n    login: connectHandler,\n    logout: disconnectHandler,\n    children: /*#__PURE__*/_jsxDEV(Component, _objectSpread(_objectSpread({}, pageProps), {}, {\n      account: account,\n      amount: amount,\n      click: connectHandler,\n      buyclick: buyHandler,\n      contract: JuroTokenContract,\n      logout: disconnectHandler,\n      totalSupply: totalToken\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/turtl/TokenApp/pages/_app.js"],"names":["Layout","useState","useEffect","Web3","JuroToken","injected","useWeb3React","Web3ReactProvider","MyApp","Component","pageProps","web3","setWeb3","account","setAccount","amount","setAmount","JuroTokenContract","setJuroTokenContract","tokenOwner","totalToken","setTotalToken","active","library","connector","activate","deactivate","connect","ex","console","log","disconnect","loadBlockChainData","window","ethereum","accounts","eth","getAccounts","length","networkId","net","getId","juroToken","Contract","abi","networks","address","on","chainId","location","reload","loadTokenAmountData","tokenAmount","methods","balanceOf","call","totalSupplyData","totalSupply","connectHandler","request","method","disconnectHandler","params","eth_accounts","then","buyHandler","getToken","send","from","value","error","alert"],"mappings":"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","sourcesContent":["import Layout from \"../components/layout/Layout\";\nimport { useState, useEffect } from \"react\";\nimport Web3 from 'web3';\nimport JuroToken from '../build/contracts/JuroToken.json';\nimport {injected} from '../utils/connector';\nimport {useWeb3React} from \"@web3-react/core\"\nimport { Web3ReactProvider } from '@web3-react/core'\n\n\nimport \"../styles/globals.css\";\n\nfunction MyApp({ Component, pageProps }) {\n  const [web3, setWeb3] = useState(null)\n\tconst [account, setAccount] = useState(null)\n\tconst [amount, setAmount] = useState(0)\n  const [JuroTokenContract, setJuroTokenContract] = useState(null)\n  const tokenOwner='0x5b1030dcd0af8b77b83e1b52e01864a79bed32ed'\n  const [totalToken, setTotalToken]=useState(0)\n\n  const { active, library, connector, activate, deactivate } = useWeb3React()\n\n  async function connect() {\n    try {\n      await activate(injected)\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n  async function disconnect() {\n    try {\n      deactivate()\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n\n  const loadBlockChainData=async()=>{\n    if (typeof window.ethereum!=='undefined') {\n      // window.ethereum.request({method:'eth_requestAccounts'})\n\t\t\tconst web3 = new Web3(window.ethereum)\n\t\t\tsetWeb3(web3)\n\n\t\t\tconst accounts = await web3.eth.getAccounts()\n      console.log(accounts)\n\n\t\t\tif (accounts.length > 0) {\n\t\t\t\tsetAccount(accounts[0])\n\t\t\t}\n\n\t\t\tconst networkId = await web3.eth.net.getId()\n      console.log(networkId)\n\n\t\t\tconst juroToken = new web3.eth.Contract(JuroToken.abi, JuroToken.networks[networkId].address)\n\t\t\tsetJuroTokenContract(juroToken)\n      console.log(JuroTokenContract)\n\n      window.ethereum.on('accountsChanged', function (accounts) {\n\t\t\t\tsetAccount(accounts[0])\n        console.log(account)\n\t\t\t})\n      window.ethereum.on('chainChanged', (chainId) => {\n\t\t\t\twindow.location.reload();\n\t\t\t})\n    }\n  }\n\n  const loadTokenAmountData=async()=>{\n    if (account && JuroTokenContract){\n      const tokenAmount=await JuroTokenContract.methods.balanceOf(account).call()\n      setAmount(tokenAmount)\n      console.log(amount)\n\n    }\n  }\n  const totalSupplyData=async()=>{\n    if (JuroTokenContract){\n      const totalSupply=await JuroTokenContract.methods.totalSupply().call()\n      setTotalToken(totalSupply);\n      console.log(totalToken)\n      }\n    }\n\n  useEffect(()=>{\n    loadBlockChainData(),loadTokenAmountData(), totalSupplyData()\n  },[])\n\n\n  useEffect(()=>{\n    loadBlockChainData(),loadTokenAmountData(), totalSupplyData()\n  },[account,])\n\n\n  useEffect(()=>{\n    loadTokenAmountData()\n  },[account,amount])\n\n  useEffect(()=>{\n    totalSupplyData()\n  },[totalToken])\n\n  \n  const connectHandler=async()=>{\n    if (web3){const accounts=await window.ethereum.request({method:'eth_requestAccounts'})\n    console.log(accounts)\n    setAccount(accounts[0])}\n  }\n\n  const disconnectHandler=async()=>{\n    if (web3){const accounts=await window.ethereum.request({\n      method: \"wallet_requestPermissions\",\n      params: [{eth_accounts: {}}]\n      \n  }).then(()=>ethereum.request({\n    method:'eth_requestAccounts'\n  }))\n\n    setAccount(accounts[0])}\n  }\n\n\n  const buyHandler = async () => {\n    try {\n      console.log(account)\n      const getToken=await JuroTokenContract.methods.getToken().send({ from:account, value:'1000000000000000'})\n      const tokenAmount=await JuroTokenContract.methods.balanceOf(account).call()\n      setAmount(tokenAmount)\n\n      console.log(getToken)\n  \n\n    } catch (error) {\n      window.alert('Error occurred when buying')\n    }\n  }\n  \n  return (\n    <Layout account={account} login={connectHandler} logout={disconnectHandler}>\n      <Component {...pageProps} account={account} amount={amount} click={connectHandler} buyclick={buyHandler} contract={JuroTokenContract} logout={disconnectHandler} totalSupply={totalToken}/>\n    </Layout>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}